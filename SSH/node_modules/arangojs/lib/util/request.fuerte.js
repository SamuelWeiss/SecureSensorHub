'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (baseUrl, agentOptions) {
  var baseUrlParts = (0, _url.parse)(baseUrl);

  var queue = new _linkedlist2.default();
  var maxTasks = typeof agentOptions.maxSockets === 'number' ? agentOptions.maxSockets * 2 : Infinity;
  var idleConnections = new _linkedlist2.default();
  var activeConnections = new Set();

  function drainQueue() {
    if (!queue.length || activeConnections.size >= maxTasks) return;
    var task = queue.shift();
    var conn = void 0;
    if (idleConnections.length) conn = idleConnections.shift();else {
      var server = new _arangoNodeDriver.fuerte.Server(baseUrlParts.protocol + '//' + baseUrlParts.host);
      conn = server.makeConnection();
    }
    activeConnections.add(conn);
    task(conn, function () {
      activeConnections.delete(conn);
      idleConnections.push(conn);
      drainQueue();
    });
  }

  function request(_ref, cb) {
    var method = _ref.method,
        url = _ref.url,
        headers = _ref.headers,
        body = _ref.body,
        expectBinary = _ref.expectBinary;

    var path = baseUrlParts.pathname ? url.pathname ? joinPath(baseUrlParts.pathname, url.pathname) : baseUrlParts.pathname : url.pathname;
    // const search = url.search ? (
    //   baseUrlParts.search ? `${baseUrlParts.search}&${url.search.slice(1)}` : url.search
    // ) : baseUrlParts.search

    queue.push(function (conn, next) {
      var _callback = function callback() {
        _callback = function callback() {
          return undefined;
        };
        next();
        cb.apply(undefined, arguments);
      };

      var connUrl = new _arangoNodeDriver.fuerte.ConnectionUrl();
      connUrl.setServerUrl(baseUrlParts.protocol + '//' + baseUrlParts.host);
      var parts = path.match(/^\/_db\/([^/]+)(.*)/);
      if (!parts) return _callback(new Error('Invalid path?!?'));
      connUrl.setDbName(parts[1]);
      connUrl.setTailUrl(parts[2]);
      conn.reset();
      conn.setHeaderOpts();
      conn.setUrl(connUrl);
      switch (method) {
        case 'POST':
          conn.setPostField(_arangoNodeDriver.vpack.encode(body));
          conn.setPostReq();
          conn.setBuffer();
          break;
        case 'PUT':
          conn.setPostField(_arangoNodeDriver.vpack.encode(body));
          conn.setPutReq();
          conn.setBuffer();
          break;
        case 'PATCH':
          conn.setPostField(_arangoNodeDriver.vpack.encode(body));
          conn.setPatchReq();
          conn.setBuffer();
          break;
        case 'GET':
          conn.setGetReq();
          conn.setBuffer();
          break;
        case 'DELETE':
          conn.setPostField(_arangoNodeDriver.vpack.encode(body));
          conn.setDeleteReq();
          conn.setBuffer();
          break;
        default:
          return _callback(new Error('Method not implemented: "' + method + '"'));
      }
      conn.SetAsynchronous(true);
      function run() {
        try {
          conn.Run();
          if (conn.IsRunning()) setImmediate(run);else {
            var result = conn.Result();
            _callback(null, {
              body: _arangoNodeDriver.vpack.decode(result),
              statusCode: conn.ResponseCode(),
              headers: {}
            });
          }
        } catch (e) {
          _callback(e);
        }
      }
      run();
    });

    drainQueue();
  }

  var auth = baseUrlParts.auth;
  delete baseUrlParts.auth;
  return { request: request, auth: auth, url: baseUrlParts };
};

var _arangoNodeDriver = require('fuerte/arango-node-driver');

var _url = require('url');

var _linkedlist = require('linkedlist');

var _linkedlist2 = _interopRequireDefault(_linkedlist);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function joinPath() {
  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  if (!a && !b) return '';
  var leadingSlash = a.charAt(0) === '/';
  var trailingSlash = b.charAt(b.length - 1) === '/';
  var tokens = (a + '/' + b).split('/').filter(Boolean);
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];
    if (token === '..') {
      tokens.splice(i - 1, 2);
      i--;
    } else if (token === '.') {
      tokens.splice(i, 1);
      i--;
    }
  }
  var path = tokens.join('/');
  if (leadingSlash) path = '/' + path;
  if (trailingSlash) path = path + '/';
  return path;
}